{"version":3,"sources":["homepage/Homepage.lazy.tsx","about/About.lazy.tsx","side-nav/SideNav.lazy.tsx","contact/Contact.lazy.tsx","site-header/SiteHeader.lazy.tsx","404/PageNotFound.lazy.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LazyHomepage","lazy","Homepage","props","fallback","LazyAbout","About","LazySideNav","SideNav","LazyContact","Contact","LazySiteHeader","SiteHeader","LazyPageNotFound","PageNotFound","App","className","SidebarPushable","as","Segment","style","overflow","SidebarPusher","height","minHeight","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAEMA,EAAeC,gBAAK,kBAAM,iCAQjBC,EANE,SAACC,GAAD,OACf,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACJ,EAAiBG,KCJhBE,EAAYJ,gBAAK,kBAAM,iCAQdK,EAND,SAACH,GAAD,OACZ,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACC,EAAcF,KCJbI,EAAcN,gBAAK,kBAAM,uDAQhBO,EANC,SAACL,GAAD,OACd,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACG,EAAgBJ,KCJfM,EAAcR,gBAAK,kBAAM,iCAQhBS,EANC,SAACP,GAAD,OACd,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACK,EAAgBN,K,2BCJfQ,EAAiBV,gBAAK,kBAAM,iCAQnBW,EANI,SAACT,GAAD,OACjB,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACO,EAAmBR,KCJlBU,EAAmBZ,gBAAK,kBAAM,iCAQrBa,EANM,SAACX,GAAD,OACnB,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAACS,EAAqBV,KCmCXY,MA1Bf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,GAAIC,IAASC,MAAO,CAAEC,SAAU,WAC/C,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,yBAAKN,UAAU,SAASI,MAAO,CAAEG,OAAQ,SACvC,kBAAC,EAAD,OAEF,yBAAKP,UAAU,OAAOI,MAAO,CAAEI,UAAW,SACxC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWpB,IAChC,kBAAC,IAAD,CAAOmB,KAAK,WAAWC,UAAWhB,IAClC,kBAAC,IAAD,CAAOiB,OAAK,EAACF,KAAK,IAAIC,UAAWxB,IACjC,kBAAC,IAAD,CAAOuB,KAAK,KAAKC,UAAWZ,WClBxBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.09b8aba5.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\n\nconst LazyHomepage = lazy(() => import('./Homepage'));\n\nconst Homepage = (props: JSX.IntrinsicAttributes & { children?: React.ReactNode; }) => (\n  <Suspense fallback={null}>\n    <LazyHomepage {...props} />\n  </Suspense>\n);\n\nexport default Homepage;\n","import React, { lazy, Suspense } from 'react';\n\nconst LazyAbout = lazy(() => import('./About'));\n\nconst About = (props: JSX.IntrinsicAttributes & { children?: React.ReactNode; }) => (\n  <Suspense fallback={null}>\n    <LazyAbout {...props} />\n  </Suspense>\n);\n\nexport default About;\n","import React, { lazy, Suspense } from 'react';\n\nconst LazySideNav = lazy(() => import('./SideNav'));\n\nconst SideNav = (props: JSX.IntrinsicAttributes & { children?: React.ReactNode; }) => (\n  <Suspense fallback={null}>\n    <LazySideNav {...props} />\n  </Suspense>\n);\n\nexport default SideNav;\n","import React, { lazy, Suspense } from 'react';\n\nconst LazyContact = lazy(() => import('./Contact'));\n\nconst Contact = (props: JSX.IntrinsicAttributes & { children?: React.ReactNode; }) => (\n  <Suspense fallback={null}>\n    <LazyContact {...props} />\n  </Suspense>\n);\n\nexport default Contact;\n","import React, { lazy, Suspense } from 'react';\n\nconst LazySiteHeader = lazy(() => import('./SiteHeader'));\n\nconst SiteHeader = (props: JSX.IntrinsicAttributes & { children?: React.ReactNode; }) => (\n  <Suspense fallback={null}>\n    <LazySiteHeader {...props} />\n  </Suspense>\n);\n\nexport default SiteHeader;\n","import React, { lazy, Suspense } from 'react';\n\nconst LazyPageNotFound = lazy(() => import('./PageNotFound'));\n\nconst PageNotFound = (props: JSX.IntrinsicAttributes & { children?: React.ReactNode; }) => (\n  <Suspense fallback={null}>\n    <LazyPageNotFound {...props} />\n  </Suspense>\n);\n\nexport default PageNotFound;\n","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Homepage from './homepage/Homepage.lazy';\nimport About from './about/About.lazy';\nimport SideNav from './side-nav/SideNav.lazy';\nimport Contact from './contact/Contact.lazy';\nimport { SidebarPushable, Segment, SidebarPusher } from 'semantic-ui-react';\nimport SiteHeader from './site-header/SiteHeader.lazy';\nimport PageNotFound from './404/PageNotFound.lazy';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <SidebarPushable as={Segment} style={{ overflow: 'hidden' }}>\n          <SideNav />\n          <SidebarPusher>\n            <div className=\"header\" style={{ height: '10vh' }}>\n              <SiteHeader />\n            </div>\n            <div className=\"body\" style={{ minHeight: '90vh' }}>\n              <Switch>\n                <Route path=\"/about\" component={About} />\n                <Route path=\"/contact\" component={Contact} />\n                <Route exact path=\"/\" component={Homepage} />\n                <Route path=\"/*\" component={PageNotFound} />\n              </Switch>\n\n            </div>\n          </SidebarPusher>\n        </SidebarPushable>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}